Program 1. Perform the following DB operations using Cassandra.

1. Create a key space by name Employee

cqlsh> create keyspace Employee with replication = {
   ... 'class' : 'SimpleStrategy',
   ... 'replication_factor': 1
   ... };
   

2. Create a column family by name Employee-Info with attributes Emp_Id Primary Key, Emp_Name, Designation, Date_of_Joining, Salary, Dept_Name

cqlsh:employee> create table employee_info(
            ... Emp_id int PRIMARY KEY,
            ... Emp_name text,
            ... Designation text,
            ... Date_of_joining timestamp,
            ... Salary double,
            ... Dept_name text
            ... );
cqlsh:employee> describe tables;

employee_info

cqlsh:employee> describe table Employee_info;

CREATE TABLE employee.employee_info (
    emp_id int PRIMARY KEY,
    date_of_joining timestamp,
    dept_name text,
    designation text,
    emp_name text,
    salary double
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

3. Insert the values into the table in batch

cqlsh:employee> begin batch
            ... insert into employee_info (emp_id,emp_name,designation,date_of_joining,salary,dept_name) values (1,'prathiksha','HR','2020-03-01',50000,'HR dept')
            ... apply batch;
cqlsh:employee> select * from Employee_info;

 emp_id | date_of_joining                 | dept_name | designation | emp_name   | salary
--------+---------------------------------+-----------+-------------+------------+--------
      1 | 2020-02-29 18:30:00.000000+0000 |   HR dept |          HR | prathiksha |  50000

(1 rows)
cqlsh:employee> begin batch
            ... insert into employee_info (emp_id,emp_name,designation,date_of_joining,salary,dept_name) values (2,'pranav','Editor','2020-04-01',40000,'Marketing dept')
            ... insert into employee_info (emp_id,emp_name,designation,date_of_joining,salary,dept_name) values (3,'rahul','Software Engineer','2020-05-01',60000,'technical')
            ... insert into employee_info (emp_id,emp_name,designation,date_of_joining,salary,dept_name) values (4,'anuradha','Security Manager','2020-05-01',60000,'security')
            ... insert into employee_info (emp_id,emp_name,designation,date_of_joining,salary,dept_name) values (5,'sonal','HR employee','2020-05-01',60000,'HR dept')
            ... apply batch;
cqlsh:employee> select * from Employee_info;

 emp_id | date_of_joining                 | dept_name      | designation       | emp_name   | salary
--------+---------------------------------+----------------+-------------------+------------+--------
      5 | 2020-04-30 18:30:00.000000+0000 |        HR dept |       HR employee |      sonal |  60000
      1 | 2020-02-29 18:30:00.000000+0000 |        HR dept |                HR | prathiksha |  50000
      2 | 2020-03-31 18:30:00.000000+0000 | Marketing dept |            Editor |     pranav |  40000
      4 | 2020-04-30 18:30:00.000000+0000 |       security |  Security Manager |   anuradha |  60000
      3 | 2020-04-30 18:30:00.000000+0000 |      technical | Software Engineer |      rahul |  60000

(5 rows)

4. Update Employee name and Department of Emp-Id 121

cqlsh:employee> update employee_info set emp_name='prashansa',dept_name='Marketing' where emp_id=1;
cqlsh:employee> select * from Employee_info;

 emp_id | date_of_joining                 | dept_name      | designation       | emp_name  | salary
--------+---------------------------------+----------------+-------------------+-----------+--------
      5 | 2020-04-30 18:30:00.000000+0000 |        HR dept |       HR employee |     sonal |  60000
      1 | 2020-02-29 18:30:00.000000+0000 |      Marketing |                HR | prashansa |  50000
      2 | 2020-03-31 18:30:00.000000+0000 | Marketing dept |            Editor |    pranav |  40000
      4 | 2020-04-30 18:30:00.000000+0000 |       security |  Security Manager |  anuradha |  60000
      3 | 2020-04-30 18:30:00.000000+0000 |      technical | Software Engineer |     rahul |  60000


5. Sort the details of Employee records based on salary

create table emp( id int, salary int, name text,primary key(id,salary) );
cqlsh:employee> begin batch
            ... insert into emp(id,salary,name)values (1,10000,'prathiksha')
            ... insert into emp(id,salary,name)values (2,10000,'pooja')
            ... insert into emp(id,salary,name)values (3,10000,'prema')
            ... insert into emp(id,salary,name)values (3,20000,'rahul')
            ... insert into emp(id,salary,name)values (4,30000,'raghu')
            ... apply batch
            ... ;
cqlsh:employee> paging off;
Disabled Query paging.
cqlsh:employee> select *from emp where id in (1,2,3,4) order by salary;

 id | salary | name
----+--------+------------
  1 |  10000 | prathiksha
  2 |  10000 |      pooja
  3 |  10000 |      prema
  3 |  20000 |      rahul
  4 |  30000 |      raghu

(5 rows)


6. Alter the schema of the table Employee_Info to add a column Projects which stores a set of 
   Projects done by the corresponding Employee.
   
cqlsh:employee> alter table employee_info add projects text;
cqlsh:employee> describe table Employee_info;

CREATE TABLE employee.employee_info (
    emp_id int PRIMARY KEY,
    date_of_joining timestamp,
    dept_name text,
    designation text,
    emp_name text,
    projects text,
    salary double
 
7. Update the altered table to add project names.

cqlsh:employee> begin batch
            ... update employee_info set projects='abc' where emp_id=1
            ... update employee_info set projects='def' where emp_id=2
            ... update employee_info set projects='ghi' where emp_id=3
            ... update employee_info set projects='jkl' where emp_id=4
            ... update employee_info set projects='mno' where emp_id=5
            ... apply batch;

cqlsh:employee> select * from Employee_info;

 emp_id | date_of_joining                 | dept_name      | designation       | emp_name  | projects | salary
--------+---------------------------------+----------------+-------------------+-----------+----------+--------
      5 | 2020-04-30 18:30:00.000000+0000 |        HR dept |       HR employee |     sonal |      mno |  60000
      1 | 2020-02-29 18:30:00.000000+0000 |      Marketing |                HR | prashansa |      abc |  50000
      2 | 2020-03-31 18:30:00.000000+0000 | Marketing dept |            Editor |    pranav |      def |  40000
      4 | 2020-04-30 18:30:00.000000+0000 |       security |  Security Manager |  anuradha |      jkl |  60000
      3 | 2020-04-30 18:30:00.000000+0000 |      technical | Software Engineer |     rahul |      ghi |  60000

(5 rows)

8. Create a TTL of 15 seconds to display the values of Employees.
cqlsh:employee> insert into Employee_info (emp_id,emp_name,designation,date_of_joining,salary,dept_name) 
                values (19,'prithvi',senior_developer','2022-08-09',40000,'Developing') using TTL 50;


